/*
 * This file is generated by jOOQ.
 */
package app.cta4j.jooq.tables.records;


import app.cta4j.jooq.enums.Direction;
import app.cta4j.jooq.tables.RouteDirection;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RouteDirectionRecord extends UpdatableRecordImpl<RouteDirectionRecord> implements Record2<String, Direction> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.route_direction.route_id</code>.
     */
    public void setRouteId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.route_direction.route_id</code>.
     */
    public String getRouteId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.route_direction.direction</code>.
     */
    public void setDirection(Direction value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.route_direction.direction</code>.
     */
    public Direction getDirection() {
        return (Direction) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Direction> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Direction> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Direction> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return RouteDirection.ROUTE_DIRECTION.ROUTE_ID;
    }

    @Override
    public Field<Direction> field2() {
        return RouteDirection.ROUTE_DIRECTION.DIRECTION;
    }

    @Override
    public String component1() {
        return getRouteId();
    }

    @Override
    public Direction component2() {
        return getDirection();
    }

    @Override
    public String value1() {
        return getRouteId();
    }

    @Override
    public Direction value2() {
        return getDirection();
    }

    @Override
    public RouteDirectionRecord value1(String value) {
        setRouteId(value);
        return this;
    }

    @Override
    public RouteDirectionRecord value2(Direction value) {
        setDirection(value);
        return this;
    }

    @Override
    public RouteDirectionRecord values(String value1, Direction value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RouteDirectionRecord
     */
    public RouteDirectionRecord() {
        super(RouteDirection.ROUTE_DIRECTION);
    }

    /**
     * Create a detached, initialised RouteDirectionRecord
     */
    public RouteDirectionRecord(String routeId, Direction direction) {
        super(RouteDirection.ROUTE_DIRECTION);

        setRouteId(routeId);
        setDirection(direction);
        resetChangedOnNotNull();
    }
}
