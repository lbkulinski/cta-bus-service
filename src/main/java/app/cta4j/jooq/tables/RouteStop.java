/*
 * This file is generated by jOOQ.
 */
package app.cta4j.jooq.tables;


import app.cta4j.jooq.Keys;
import app.cta4j.jooq.Public;
import app.cta4j.jooq.tables.records.RouteStopRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RouteStop extends TableImpl<RouteStopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.route_stop</code>
     */
    public static final RouteStop ROUTE_STOP = new RouteStop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouteStopRecord> getRecordType() {
        return RouteStopRecord.class;
    }

    /**
     * The column <code>public.route_stop.route_id</code>.
     */
    public final TableField<RouteStopRecord, String> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.route_stop.direction_id</code>.
     */
    public final TableField<RouteStopRecord, Integer> DIRECTION_ID = createField(DSL.name("direction_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.route_stop.stop_id</code>.
     */
    public final TableField<RouteStopRecord, Integer> STOP_ID = createField(DSL.name("stop_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RouteStop(Name alias, Table<RouteStopRecord> aliased) {
        this(alias, aliased, null);
    }

    private RouteStop(Name alias, Table<RouteStopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.route_stop</code> table reference
     */
    public RouteStop(String alias) {
        this(DSL.name(alias), ROUTE_STOP);
    }

    /**
     * Create an aliased <code>public.route_stop</code> table reference
     */
    public RouteStop(Name alias) {
        this(alias, ROUTE_STOP);
    }

    /**
     * Create a <code>public.route_stop</code> table reference
     */
    public RouteStop() {
        this(DSL.name("route_stop"), null);
    }

    public <O extends Record> RouteStop(Table<O> child, ForeignKey<O, RouteStopRecord> key) {
        super(child, key, ROUTE_STOP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RouteStopRecord> getPrimaryKey() {
        return Keys.ROUTE_STOP_PKEY;
    }

    @Override
    public List<ForeignKey<RouteStopRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROUTE_STOP__ROUTE_STOP_ROUTE_ID_FKEY, Keys.ROUTE_STOP__ROUTE_STOP_DIRECTION_ID_FKEY, Keys.ROUTE_STOP__ROUTE_STOP_STOP_ID_FKEY);
    }

    private transient Route _route;
    private transient Direction _direction;
    private transient Stop _stop;

    /**
     * Get the implicit join path to the <code>public.route</code> table.
     */
    public Route route() {
        if (_route == null)
            _route = new Route(this, Keys.ROUTE_STOP__ROUTE_STOP_ROUTE_ID_FKEY);

        return _route;
    }

    /**
     * Get the implicit join path to the <code>public.direction</code> table.
     */
    public Direction direction() {
        if (_direction == null)
            _direction = new Direction(this, Keys.ROUTE_STOP__ROUTE_STOP_DIRECTION_ID_FKEY);

        return _direction;
    }

    /**
     * Get the implicit join path to the <code>public.stop</code> table.
     */
    public Stop stop() {
        if (_stop == null)
            _stop = new Stop(this, Keys.ROUTE_STOP__ROUTE_STOP_STOP_ID_FKEY);

        return _stop;
    }

    @Override
    public RouteStop as(String alias) {
        return new RouteStop(DSL.name(alias), this);
    }

    @Override
    public RouteStop as(Name alias) {
        return new RouteStop(alias, this);
    }

    @Override
    public RouteStop as(Table<?> alias) {
        return new RouteStop(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RouteStop rename(String name) {
        return new RouteStop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RouteStop rename(Name name) {
        return new RouteStop(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RouteStop rename(Table<?> name) {
        return new RouteStop(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
